(2022/5/20)
Analytical gradients sweep algorithm to speed-up jac_mpi 

(2022/5/13)
Ver 0.8, Modularized

(2022/5/9)
1. Spin-Free MRUCCSD for MBE  (invoked by ansatz = sauccsd and from_vir = True)

(2022/5/6)
1. fci2qubit with tapered-off option. 
2. Faster routine to get unique pauli list.
3. HF with non-aufbau configuration (to be combined with MOM).

(2022/4/8)
1. SAOO approach is corrected and modified. QuketData Multi section now has "init_states_info" and "init_states", where the former indicates a set of the coefficients and determiants, and the latter the quantum states generated by the former.
2. UCCGSDT and UCCGSDTQ are implemented (spin-dependent). 
3. get_Heff() and get_transition_amplitude() functions are implemented for QuketData.

(2022/4/6)
1. Revive Overlap_by_pauli_list in qite.py for S matrix
2. QuketData save, load, and copy fixed (mo_coeff and tapering)

(2022/4/1)
1. MBE merged with various improvements over mbe_ver0.7.1


(2022/2/8)
1. spinfree option in Gdoubles_list to enable pA^ qB^ pB qA type excitations
2. Fixed bugs for save, load, and copy functions.
3. QITE and MSQITE using pauli_list. State-Average QITE for test. 
4. Tapering-off qubits in QITE/MSQITE.
5. 'operator' option to specify if pauli_list is disassembled (operator = pauli or qubit) or assembled (operator = fermi or fermionic). Defaulted to operator = fermi.

(2021/2/4)
1. Some bugs fixed in read.py


(2021/1/21)
1. fci.py is fixed for excited states, and spin-symmetry

(2021/12/15)
1. Function to perform Boys localization using PySCF implementation,  Quket.boys(*args) where orbital indices go to *args. New keywords in input: local = 5, 6 etc., which performs Boys localization between 5 and 6-th orbitals. 
2. Function to switch ordering of orbitals alter(). New keywords in input: alter = (0,2), (5,6) etc. which exchange 0 and 2nd orbitals and 5 and 6th orbitals
3. Read option to read qkt data from previous calculation (not fully tested).
4. Spinfree-UCCGSD and UCCGD are added (invoked by calling sauccgsd, sauccgd respectively)
5. TODO: Excited states not correct with tapering. Determining VQE parameters ndim is a MESS

(2021/12/10)
1. Solve Augmented Hessian with Davidson algorithm (Bug fixed for exp(kappa) * exp(delta) != exp(kappa + delta))
2. Removed spin-breaking solution from Augmented Hessian

(2021/11/17-12/4)
Updated to ver0.7.
1. Added and modified Sasasako's tapering-off subroutines: get_pauli_list(), transform_all().
2. Added UCCGSD. 
3. Wrapper for mpi communicator.
4. Frozen-virtual orbitals treated (both in relax rdm in rdm.py and nuclear gradients in grad.py) 
5. Several minor corrections, including pgs.
6. Added new functions for quketdata; copy()
7. Orbital Hessian of VQE (Orbital gradient code is renamed from get_allJ() to get_orbital_gradient)
8. Added linalg module and fci module to separate functionalities (linalg.py and fci.py)
9. Zmatrix is supported
10. Tapering code is updated.

*** Tsuchimochi
1. Add post_run(), grad(), and opt(). Now run() only runs VQE/QITE.
2. Store init_dict and kwds in QuketData as QuketData._init_dict, QuketData._kwds (need for opt()).

(2021/11/2) Tsuchimochi
Updated to ver0.6.
quket.py was replaced by __init__.py.
read.py was modified to appropriately handle command line options.

(2021/10/30) Tsuchimochi
Prototype version of quket with the interactive mode. For details, consult README.md
1. config.py now contains essential parameters and many calculation-dependent variables are moved to Config class of QuketData and can be accessed as its attirbutes QuketData.cf.***. 
2. quket.py is added (temporary). This can be imported in the interactive mode, "import quket". create_quket() generates QuketData instance. 
3. Several functions were added to QuketData class (get_E, get_S2, get_N, run, save, load, read, print_state, transform_state, transform_operators). These functions allow for simple manupilations in the interactive mode.
4. MPI and OpenMP are not yet supported for the interactive mode.
5. main.py can be still used as a job script.  

=======
(2021/10/29) Tsuchimochi
Updated to ver0.5.4. Minor corrections.
1. Parity bugs fixed in Gdoubles_ope and Gdoubles_fswap
2. Tapering-off algorithm based on point-group symmetry has been incorporated (Tsang) 
3. Added some functions to QuketData class. Mainly those useful for tapering-off algorithm (transform_state, transform_operators). 
4. Added test versions of SR1 and LSR1 for direct otpimization of excited states (Yoshimura). Their functionalities are neither guaranteed nor supported, yet to be tested. 

(2021/10/21) Tsuchimochi
Updated to ver0.5.3.
1. Relaxed RDM is now available for frozen-core (not frozen-virtual yet). samples/RDM/relax.py is modified to comply with ADAPT 
2. Nuclear Gradients and Geometry Optimization. See samples in samples/OPT/. gradient.py is available for numerical difference (similar usage as relax.py).
3. Faster evaluation of energy derivatives with respect to VQE parameters (using numerical wave function derivatives instead of numerical energy derivatives).
4. Screening in circuit construction to speed up (skip if theta < cf.theta_threshold)
5. MPI parallelization for get_expectation_value
 --> These improvements enable much faster simulations.
6. Fermionic swap for CNOT (use 'fswap = True'). 
7. Lineraized UCC, CISD, and Canonical Transformation Theory are implemented (use 'post_method = lucc' etc).
8. test.py is updated.

(2021/08/26) Tsuchimochi
Updated to ver0.5.2.
1. Tapering-off algorithm is improved (redued row Echelon form has been fixed).
2. MSQITE and FSQITE algorithms are implemented. 
3. Some additional subroutines are available (exciter, Separate_Fermionic_Hamiltonian)
4. quket.sh is modified.

(2021/05/21) Tsuchimochi
Updated to ver0.5.1. 
1. ADAPT gradient evaluation is rather slow if analytical expression is used ([H,Ak] or AkH, which increases the number of terms to be evaluated),
   so I decided to go back use (central) numerical differentiation with stepsize 1e-6, which is sufficiently accurate (accurate to about 1e-10).
2. In every run of ADAPT, ***.adapt file is created, which contains the operators used and their gradients. The format  is
      [cycle]  [b]  [a]  [j]  [i]  [spin]  [grad]  
   If adapt_guess = read in the input, the code fetches ***.adapt and read the operators without calculating gradients.
3. There have been some incorrect treatments on frozen-core orbitals in rdm.py (h_pqrs and mo_energy indices). Now fixed.

(2021/05/19) Tsuchimochi
Updted to ver0.5. Several new functions are introduced.
1. QITE: QLanczos, Energy Shift.
2. MBE: Secondary orbitals. Core orbitals to be added in future.
3. ADAPT: Combined with spin-projection to reduce CNOT gates.
4. RDM: Relaxed density matrix for ADAPT (to be updated for open-shell).
5. ic-MRUCC: Spin-Projection is also doable. 
6. Tapering: Prototype-code for Tapering-off qubits (to be combined). 
7. Other many improvements, such as OpenMP thread parallelization and test.py for test calculations. 

(2021/03/10) Tsuchimochi
1. Introduced 'Gdoubles_list', which creates a list of unique generalized doubles
2. ADAPTE-VQE (Taii) is merged with some modifications (to be tested)
3. Added some more methods in QuketData:
   (a) get_Aaibj, get_Jai, get_1RDM, get_relax_delta by Nishimaki
   (b) fci2qubit, fidelity
4. Bug-fix in several subroutines

(2021/02/27) Tsuchimochi
1. Introduced "QuketData" class (init.py) to handle parameters/operators 
2. Accordingly renamed parameter names, the most important one being 'method' changed to 'ansatz'
3. QITE implemented, can be invoked by 'method = qite'

(2021/02/05) Tsuchimochi
1. Bug fixed for hubbard model and spin-projection (Sz part) in phflib.py 
2. Spin and Ms correctly treated in mod.py (specify 'multiplicity' to define Ms = (noa - nob)/2, and 'spin' to define actual spin 2s+1)
3. Introduced BCS and number-projection (agpbcs.py and NProj in phflib.py)
4. Introduced extended UpCCGSD 
5. Created upcclib.py module 

(2021/02/02) Tsuchimochi
1. Bug fixed for print_state (in fileio.py) and single_ope (ncnot undefined).
2. Introduced Gdouble_ope in expope.py for general double excitations.
3. Introduced spin-projection in k-UpCCGSD (breaks spin-symmetry by using the different signs between alpha and beta singles)
4. Added some useful documents in docs directory.

(2021/01/20) Tsuchimochi
1. method = SGHF is introduced for non-collinear spin projection of generalized HF
2. Formatted the program codes by "black"
3. read.py is added: the read-in code for input file is separated from main.py.
4. Bug fixed for mpi_bcast of theta_list and kappa_list. 

(2020/12/14) Tsuchimochi
1. Function for Spin-Projection 'S2Proj'. Args [SpinProj, euler, spin] are introduced.
2. Modified create_state and renamed to create_uccsd_state.
3. Added UCCSD excited states by penalizing the uccsd energy (orthogonally-constrained VQE). Introduced 'Excited' section to specify the initial determinants for excited states
4. Bug fix for LoadTheta, geometry section, multi section.

(2020/12/10) Tsuchimochi
1. Created quket script for running quket with MPI.
2. Added prop.py, which includes dipole and get_1RDM functions.
3. Replaced `generate_molecular_hamiltonian` (now removed) by `generate_operators`.
4. Corrected MPI broadcasting for operators in config.py (bcasted in `generate_operators`).
5. Defined printing wrapper `prints` in the newly introduced fileio.py.
6  Adjusted print appearances. 
7. Defined matrix printing function `printmat` in fileio.py.
8. Modified k-UpCCGSD so that singles are spin-free. Parameter # been changed.
9. Other cosmetic changes...

TODO
----
Need to reconcile the number of orbitals and active orbitals for property calculations.

(2020/12/04) Tsuchimochi
Added k-UpCCGSD (Yoshikura) and JM-UCC (Mori), with modifications. 
Introduced mpi4py to perform hybrid parallel calculations.
